#ifdef __INTELLISENSE__
const struct SpeciesInfo gSpeciesInfodigi_1997[] =
{
#endif

//contents :
//stage 1 -----------------
//"SPECIES_BOTAMON",
//"SPECIES_BUBBMON",
//"SPECIES_CHOROMON",
//"SPECIES_MOKUMON",
//"SPECIES_NYOKIMON",
//"SPECIES_PITCHMON",
//"SPECIES_POYOMON",
//"SPECIES_PUNIMON",
//"SPECIES_YUKIMIBOTAMON",
//"SPECIES_YURAMON",
//"SPECIES_ZURUMON",
//stage 2 -----------------
//"SPECIES_CAPRIMON",
//"SPECIES_KODOKUGUMON",
//"SPECIES_KOROMON",
//"SPECIES_MOCHIMON",
//"SPECIES_NYAROMON",
//"SPECIES_PAGUMON",
//"SPECIES_PETITMERAMON",
//"SPECIES_PUKAMON",
//"SPECIES_PYOKOMON",
//"SPECIES_TANEMON",
//"SPECIES_TOKOMON",
//"SPECIES_TSUNOMON",
//stage 3 -----------------
//"SPECIES_AGUMON",
//"SPECIES_YUKIAGUMON",
//"SPECIES_BAKUMON",
//"SPECIES_BETAMON",
//"SPECIES_MODOKIBETAMON",
//"SPECIES_CANDMON",
//"SPECIES_CHUUMON",
//"SPECIES_ELECMON",
//"SPECIES_FLORAMON",
//"SPECIES_GABUMON",
//"SPECIES_PSYCHEMON",
//"SPECIES_GANIMON",
//"SPECIES_GAZIMON",
//"SPECIES_GIZAMON",
//"SPECIES_GOBLIMON",
//"SPECIES_SHAMAMON",
//"SPECIES_SNOWGOBLIMON",
//"SPECIES_GOMAMON",
//"SPECIES_GOTSUMON",
//"SPECIES_HAGURUMON",
//"SPECIES_KOKUWAMON",
//"SPECIES_KUNEMON",
//"SPECIES_DOKUNEMON",
//"SPECIES_MUSHMON",
//"SPECIES_OTAMAMON",
//"SPECIES_PALMON",
//"SPECIES_ALRAUMON",
//"SPECIES_PATAMON",
//"SPECIES_TSUKAIMON",
//"SPECIES_PENMON",
//"SPECIES_MUCHOMON",
//"SPECIES_PICODEVIMON",
//"SPECIES_PIYOMON",
//"SPECIES_PLOTMON",
//"SPECIES_SHAKOMON",
//"SPECIES_TENTOMON",
//"SPECIES_TOYAGUMON",
//"SPECIES_CLEARAGUMON",
//"SPECIES_BUN",
//stage 4 -------------------------------
//"SPECIES_AIRDRAMON",
//"SPECIES_ANGEMON",
//"SPECIES_PIDMON",
//"SPECIES_BAKEMON",
//"SPECIES_SOULMON",
//"SPECIES_BIRDRAMON",
//"SPECIES_SABERDRAMON",
//"SPECIES_CENTARUMON",
//"SPECIES_CLOCKMON",
//"SPECIES_COELAMON",
//"SPECIES_CYCLOMON",
//"SPECIES_DARKTYRANNOMON",
//"SPECIES_DELTAMON",
//"SPECIES_DEVIDRAMON",
//"SPECIES_DEVIMON",
//"SPECIES_ICEDEVIMON",
//"SPECIES_DOKUGUMON",
//"SPECIES_DRIMOGEMON",
//"SPECIES_NISEDRIMOGEMON",
//"SPECIES_EBIDRAMON",
//"SPECIES_EVILMON",
//"SPECIES_FLARELIZARMON",
//"SPECIES_DARKLIZARMON",
//"SPECIES_FLYMON",
//"SPECIES_GARURUMON",
//"SPECIES_GURURUMON",
//"SPECIES_GEKOMON",
//"SPECIES_GESOMON",
//"SPECIES_GOKIMON",
//"SPECIES_GOLEMON",
//"SPECIES_GORIMON",
//"SPECIES_GREYMON",
//"SPECIES_GUARDROMON",
//"SPECIES_HANUMON",
//"SPECIES_ICEMON",
//"SPECIES_IGAMON",
//"SPECIES_IKKAKUMON",
//"SPECIES_KABUTERIMON",
//"SPECIES_KARATUKINUMEMON",
//"SPECIES_KIWIMON",
//"SPECIES_KOKATORIMON",
//"SPECIES_AKATORIMON",
//"SPECIES_KUWAGAMON",
//"SPECIES_LEOMON",
//"SPECIES_MECHANORIMON",
//"SPECIES_MERAMON",
//"SPECIES_MINOTAURMON",
//"SPECIES_MOJYAMON",
//"SPECIES_JUNGLEMOJYAMON",
//"SPECIES_MONOCHROMON",
//"SPECIES_MUSYAMON",
//"SPECIES_NANIMON",
//"SPECIES_NUMEMON",
//"SPECIES_GEREMON",
//"SPECIES_OCTOMON",
//"SPECIES_OGREMON",
//"SPECIES_FUGAMON",
//"SPECIES_HYOGAMON",
//"SPECIES_RAREMON",
//"SPECIES_REVOLMON",
//"SPECIES_RUKAMON",
//"SPECIES_SEADRAMON",
//"SPECIES_SHELLMON",
//"SPECIES_MORISHELLMON",
//"SPECIES_SNIMON",
//"SPECIES_STARMON",
//"SPECIES_SUKAMON",
//"SPECIES_PLATINUMSUKAMON",
//"SPECIES_TAILMON",
//"SPECIES_TANKMON",
//"SPECIES_THUNDERBALLMON",
//"SPECIES_TOGEMON",
//"SPECIES_TORTOMON",
//"SPECIES_TUSKMON",
//"SPECIES_TYRANNOMON",
//"SPECIES_UNIMON",
//"SPECIES_SHIMAUNIMON",
//"SPECIES_VEEDRAMON",
//"SPECIES_VEGIMON",
//"SPECIES_ZASSOUMON",
//"SPECIES_REDVEGIMON",
//"SPECIES_WHAMON_ADULT",
//"SPECIES_WIZARMON",
//"SPECIES_WOODMON",
//"SPECIES_YANMAMON",
//"SPECIES_SANDYANMAMON",
//"SPECIES_YUKIDARUMON",
//"SPECIES_TSUCHIDARUMON",
//stage 5 ------------------------------------------
//"SPECIES_AEROVEEDRAMON",
//"SPECIES_ANDROMON",
//"SPECIES_ANGEWOMON",
//"SPECIES_ANOMALOCARIMON",
//"SPECIES_ASURAMON",
//"SPECIES_ATLURKABUTERIMONR",
//"SPECIES_ATLURKABUTERIMONB",
//"SPECIES_BIGMAMEMON",
//"SPECIES_BLOSSOMON",
//"SPECIES_BLUEMERAMON",
//"SPECIES_BRACHIMON",
//"SPECIES_CHIMAIRAMON",
//"SPECIES_CYBERDRAMON",
//"SPECIES_DAGOMON",
//"SPECIES_DEATHMERAMON",
//"SPECIES_DELUMON",
//"SPECIES_DIGITAMAMON",
//"SPECIES_ETEMON",
//"SPECIES_EXTYRANNOMON",
//"SPECIES_GARUDAMON",
//"SPECIES_GERBEMON",
//"SPECIES_GIGADRAMON",
//"SPECIES_GIROMON",
//"SPECIES_TEKKAMON",
//"SPECIES_HANGYOMON",
//"SPECIES_HOLYANGEMON",
//"SPECIES_INSEKIMON",
//"SPECIES_JYAGAMON",
//"SPECIES_JYUREIMON",
//"SPECIES_KNIGHTMON",
//"SPECIES_LADYDEVIMON",
//"SPECIES_LILIMON",
//"SPECIES_MAMEMON",
//"SPECIES_MAMMON",
//"SPECIES_MARINEDEVIMON",
//"SPECIES_MASTERTYRANNOMON",
//"SPECIES_MEGADRAMON",
//"SPECIES_MEGASEADRAMON",
//"SPECIES_WARUSEADRAMON",
//"SPECIES_METALGREYMON",
//"SPECIES_METALGREYMONV",
//"SPECIES_METALMAMEMON",
//"SPECIES_METALTYRANNOMON",
//"SPECIES_MONZAEMON",
//"SPECIES_MUMMYMON",
//"SPECIES_NANOMON",
//"SPECIES_OKUWAMON",
//"SPECIES_OROCHIMON",
//"SPECIES_PANJYAMON",
//"SPECIES_PARROTMON",
//"SPECIES_PHANTOMON",
//"SPECIES_PICCOLOMON",
//"SPECIES_PUMPMON",
//"SPECIES_SKULLGREYMON",
//"SPECIES_SKULLSATAMON",
//"SPECIES_TONOSAMAGEKOMON",
//"SPECIES_TRICERAMON",
//"SPECIES_VADERMON",
//"SPECIES_VAMDEMON",
//"SPECIES_VERMILIMON",
//"SPECIES_WARUMONZAEMON",
//"SPECIES_WEREGARURUMON",
//"SPECIES_WHAMON_PERFECT",
//"SPECIES_ZUDOMON",
//stage 6 and above ----------------------------------------
//"SPECIES_APOCALYMON",
//"SPECIES_BABAMON",
//"SPECIES_BOLTMON",
//"SPECIES_DEMON",
//"SPECIES_DEVITAMAMON",
//"SPECIES_DIABLOMON",
//"SPECIES_GODDRAMON",
//"SPECIES_GRIFFOMON",
//"SPECIES_HERAKLEKABUTERIMON",
//"SPECIES_HOLYDRAMON",
//"SPECIES_HOUOUMON",
//"SPECIES_JIJIMON",
//"SPECIES_KINGETEMON",
//"SPECIES_MARINEANGEMON",
//"SPECIES_METALETEMON",
//"SPECIES_METALGARURUMON",
//"SPECIES_METALSEADRAMON",
//"SPECIES_MILLENNIUMMON",
//"SPECIES_MUGENDRAMON",
//"SPECIES_OMEGAMON",
//"SPECIES_PIEMON",
//"SPECIES_PINOCCHIMON",
//"SPECIES_PLESIOMON",
//"SPECIES_PUKUMON",
//"SPECIES_ROSEMON",
//"SPECIES_SABERLEOMON",
//"SPECIES_SKULLMAMMON",
//"SPECIES_VENOMVAMDEMON",
//"SPECIES_WARGREYMON",
//"SPECIES_ZANBAMON",

	    [SPECIES_BOTAMON] =
    {
        .baseHP        = 20,
        .baseAttack    = 20,
        .baseDefense   = 20,
        .baseSpeed     = 20,
        .baseSpAttack  = 20,
        .baseSpDefense = 20,
        .types = MON_TYPES(TYPE_NODAT, TYPE_NEUTRAL, TYPE_NEUTRAL),
        .catchRate = 225,
        .expYield = 100,
        .evYield_HP = 1,
        .evYield_Attack = 1,
        .evYield_Defense = 1,
        .evYield_SpAttack = 1,
        .evYield_SpDefense = 1,
        .evYield_Speed = 1,
        .itemCommon = ITEM_ORAN_BERRY,
        .itemRare = ITEM_ORAN_BERRY,
        .genderRatio = MON_GENDERLESS,
        .eggCycles = 20,
        .friendship = STANDARD_FRIENDSHIP,
        .growthRate = GROWTH_MEDIUM_FAST,
        .eggGroups = MON_EGG_GROUPS(EGG_GROUP_NO_EGGS_DISCOVERED),
        .abilities = { ABILITY_TACTICAL_RETREAT, ABILITY_TACTICAL_RETREAT, ABILITY_NONE },
        .bodyColor = BODY_COLOR_BLACK,
    #if DubNames
        .speciesName = _("Botamon"),//the digimon's dub name. e.g. gatomon
    #else
        .speciesName = _("Botamon"),//the digimon's sub name. e.g. tailmon
    #endif
        //.field = field_Dr,
        .cryId = CRY_NONE,
        .natDexNum = NATIONAL_DEX_BOTAMON,
        .categoryName = _("Unknown"),
        .height = 0,
        .weight = 0,
        .description = COMPOUND_STRING(
			"Its slimey body is covered in thick\n"
			"black fuzz. It is unable to battle as \n"
			"it's freshly hatched."),
        .pokemonScale = 256,
        .pokemonOffset = 0,
        .trainerScale = 256,
        .trainerOffset = 0,
        .frontPic = gMonFrontPic_Botamon,
        .frontPicSize = MON_COORDS_SIZE(56, 56),
        .frontPicYOffset = 7,
        .frontAnimFrames = ANIM_FRAMES(
            ANIMCMD_FRAME(0, 1),
            ANIMCMD_FRAME(1, 36),
            ANIMCMD_FRAME(0, 10),
        ),
        .frontAnimId = ANIM_V_STRETCH,
        .backPic = gMonBackPic_Botamon,
        .backPicSize = MON_COORDS_SIZE(64, 48),
        .backPicYOffset = 25,
        .backAnimId = BACK_ANIM_H_SLIDE,
        .palette = gMonPalette_Botamon,
        .shinyPalette = gMonShinyPalette_Botamon,
        .iconSprite = gMonIcon_Botamon,
        .iconPalIndex = 3,
        SHADOW(-1, 5, SHADOW_SIZE_S)
        FOOTPRINT(Botamon)
        OVERWORLD(
            sPicTable_Botamon,
            SIZE_32x32,
            SHADOW_SIZE_M,
            TRACKS_FOOT,
            sAnimTable_Following,
            gOverworldPalette_Botamon,
            gShinyOverworldPalette_Botamon
        ) // prevents a format error in python
        .levelUpLearnset = sBotamonLevelUpLearnset,
        .teachableLearnset = sBotamonTeachableLearnset,
        .evolutions = EVOLUTION({EVO_LEVEL, 5, SPECIES_KOROMON, CONDITIONS({IF_ATKSTAT_BASED, 1,1,1})},//atk, spatk, speed
                                {EVO_LEVEL, 5, SPECIES_BUKAMON, CONDITIONS({IF_DEFSTAT_BASED, 1,1,1})}//def, spdef, hp
                                ),
        //.formChangeTable = sBotamonFormChangeTable,
    },


	    [SPECIES_BUBBMON] =
    {
        .baseHP        = 20,
        .baseAttack    = 20,
        .baseDefense   = 20,
        .baseSpeed     = 20,
        .baseSpAttack  = 20,
        .baseSpDefense = 20,
        .types = MON_TYPES(TYPE_NODAT, TYPE_NEUTRAL, TYPE_NEUTRAL),
        .catchRate = 225,
        .expYield = 100,
        .evYield_HP = 1,
        .evYield_Attack = 1,
        .evYield_Defense = 1,
        .evYield_SpAttack = 1,
        .evYield_SpDefense = 1,
        .evYield_Speed = 1,
        .itemCommon = ITEM_ORAN_BERRY,
        .itemRare = ITEM_ORAN_BERRY,
        .genderRatio = MON_GENDERLESS,
        .eggCycles = 20,
        .friendship = STANDARD_FRIENDSHIP,
        .growthRate = GROWTH_MEDIUM_FAST,
        .eggGroups = MON_EGG_GROUPS(EGG_GROUP_NO_EGGS_DISCOVERED),
        .abilities = { ABILITY_TACTICAL_RETREAT, ABILITY_TACTICAL_RETREAT, ABILITY_NONE },
        .bodyColor = BODY_COLOR_BLACK,
    #if DubNames
        .speciesName = _("Pabumon"),//the digimon's dub name. e.g. gatomon
    #else
        .speciesName = _("Bubbmon"),//the digimon's sub name. e.g. tailmon
    #endif
        //.field = field_Nsp,
        .cryId = CRY_NONE,
        .natDexNum = NATIONAL_DEX_BUBBMON,
        .categoryName = _("Unknown"),
        .height = 0,
        .weight = 0,
        .description = COMPOUND_STRING(
            "Due to its surface not having hardened\n"
            "yet, it has no defensive power.\n"
            "Its bubbly body is quite expressive,\n"
            "making it very lovable."),
        .pokemonScale = 256,
        .pokemonOffset = 0,
        .trainerScale = 256,
        .trainerOffset = 0,
        .frontPic = gMonFrontPic_Bubbmon,
        .frontPicSize = MON_COORDS_SIZE(56, 56),
        .frontPicYOffset = 7,
        .frontAnimFrames = ANIM_FRAMES(
            ANIMCMD_FRAME(0, 1),
            ANIMCMD_FRAME(1, 36),
            ANIMCMD_FRAME(0, 10),
        ),
        .frontAnimId = ANIM_V_STRETCH,
        .backPic = gMonBackPic_Bubbmon,
        .backPicSize = MON_COORDS_SIZE(64, 48),
        .backPicYOffset = 10,
        .backAnimId = BACK_ANIM_H_SLIDE,
        .palette = gMonPalette_Bubbmon,
        .shinyPalette = gMonShinyPalette_Bubbmon,
        .iconSprite = gMonIcon_Bubbmon,
        .iconPalIndex = 3,
        SHADOW(1, 4, SHADOW_SIZE_S)
        FOOTPRINT(Bubbmon)
        OVERWORLD(
            sPicTable_Bubbmon,
            SIZE_32x32,
            SHADOW_SIZE_M,
            TRACKS_FOOT,
            sAnimTable_Following,
            gOverworldPalette_Bubbmon,
            gShinyOverworldPalette_Bubbmon
        ) // prevents a format error in python
        .levelUpLearnset = sBubbmonLevelUpLearnset,
        .teachableLearnset = sBubbmonTeachableLearnset,
        .evolutions = EVOLUTION({EVO_LEVEL, 5, SPECIES_KOROMON, CONDITIONS({IF_ATKSTAT_BASED, 1,1,1})},//atk, spatk, speed
                                {EVO_LEVEL, 5, SPECIES_BUKAMON, CONDITIONS({IF_DEFSTAT_BASED, 1,1,1})}//def, spdef, hp
                                ),
        //.formChangeTable = sBubbmonFormChangeTable,
    },

        [SPECIES_CHOROMON] =
    {
        .baseHP        = 20,
        .baseAttack    = 20,
        .baseDefense   = 20,
        .baseSpeed     = 20,
        .baseSpAttack  = 20,
        .baseSpDefense = 20,
        .types = MON_TYPES(TYPE_NODAT, TYPE_NEUTRAL, TYPE_NEUTRAL),
        .catchRate = 225,
        .expYield = 100,
        .evYield_HP = 1,
        .evYield_Attack = 1,
        .evYield_Defense = 1,
        .evYield_SpAttack = 1,
        .evYield_SpDefense = 1,
        .evYield_Speed = 1,
        .itemCommon = ITEM_ORAN_BERRY,
        .itemRare = ITEM_ORAN_BERRY,
        .genderRatio = MON_GENDERLESS,
        .eggCycles = 20,
        .friendship = STANDARD_FRIENDSHIP,
        .growthRate = GROWTH_MEDIUM_FAST,
        .eggGroups = MON_EGG_GROUPS(EGG_GROUP_NO_EGGS_DISCOVERED),
        .abilities = { ABILITY_TACTICAL_RETREAT, ABILITY_TACTICAL_RETREAT, ABILITY_NONE },
        .bodyColor = BODY_COLOR_BLACK,
    #if DubNames
        .speciesName = _("Choromon"),//the digimon's dub name. e.g. gatomon
    #else
        .speciesName = _("MetalKoromon"),//the digimon's sub name. e.g. tailmon
    #endif
        //.field = field_Metal_Empire,
        .cryId = CRY_NONE,
        .natDexNum = NATIONAL_DEX_CHOROMON,
        .categoryName = _("Machine"),
        .height = 0,
        .weight = 0,
        .description = COMPOUND_STRING(
            "Its red eyes act as photosensors. Due\n"
            "to its basic light sensitive program,\n"
            "it moves around wildly. When in a good\n"
            "mood, its tail sparks brighter."),
        .pokemonScale = 256,
        .pokemonOffset = 0,
        .trainerScale = 256,
        .trainerOffset = 0,
        .frontPic = gMonFrontPic_Choromon,
        .frontPicSize = MON_COORDS_SIZE(56, 56),
        .frontPicYOffset = 7,
        .frontAnimFrames = ANIM_FRAMES(
            ANIMCMD_FRAME(0, 1),
            ANIMCMD_FRAME(1, 36),
            ANIMCMD_FRAME(0, 10),
        ),
        .frontAnimId = ANIM_V_STRETCH,
        .backPic = gMonBackPic_Choromon,
        .backPicSize = MON_COORDS_SIZE(64, 48),
        .backPicYOffset = 10,
        .backAnimId = BACK_ANIM_H_SLIDE,
        .palette = gMonPalette_Choromon,
        .shinyPalette = gMonShinyPalette_Choromon,
        .iconSprite = gMonIcon_Choromon,
        .iconPalIndex = 4,
        SHADOW(1, 4, SHADOW_SIZE_S)
        FOOTPRINT(Choromon)
        OVERWORLD(
            sPicTable_Choromon,
            SIZE_32x32,
            SHADOW_SIZE_M,
            TRACKS_FOOT,
            sAnimTable_Following,
            gOverworldPalette_Choromon,
            gShinyOverworldPalette_Choromon
        ) // prevents a format error in python
        .levelUpLearnset = sChoromonLevelUpLearnset,
        .teachableLearnset = sChoromonTeachableLearnset,
        .evolutions = EVOLUTION({EVO_LEVEL, 5, SPECIES_KOROMON, CONDITIONS({IF_ATKSTAT_BASED, 1,1,1})},//atk, spatk, speed
                                {EVO_LEVEL, 5, SPECIES_BUKAMON, CONDITIONS({IF_DEFSTAT_BASED, 1,1,1})}//def, spdef, hp
                                ),
        //.formChangeTable = sChoromonFormChangeTable,
    },


#ifdef __INTELLISENSE__
};
#endif
